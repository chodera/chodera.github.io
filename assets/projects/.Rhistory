# Load packages
library(tidyverse)
library(rvest)
# Set first url
url_1 <- "https://www.archi-wiki.org/Sp%C3%A9cial:Toutes_les_pages/Adresse:?from=&to=&namespace=0"
# Load html
page <- read_html(url_1)
# Get all links from page
links <- page %>%
html_nodes("a") %>%
html_attr('href')
# Get link text
link_texts <- page %>%
html_nodes("a") %>%
html_text()
# Put together to a tibble
full_data <- tibble(links, link_texts)
# Get link to next page
next_page <- full_data %>%
filter(str_detect(link_texts, "Page suivante")) %>%
distinct() %>%
pull(links)
# Set url for next page
url_next_page <- str_c("https://www.archi-wiki.org", next_page)
## Set progress bar
i <- 0
pb <- txtProgressBar(0, 1000, style=3) # nrow(df_clean)
while (length(next_page) > 0 & i <= 1000) {
# Load html
page <- read_html(url_next_page)
# Get all links from page
links <- page %>%
html_nodes("a") %>%
html_attr('href')
# Get link text
link_texts <- page %>%
html_nodes("a") %>%
html_text()
# Put together to a tibble
page <- tibble(links, link_texts)
# Append to full data frame
full_data <- full_data %>%
bind_rows(page)
# Get link to next page
next_page <- page %>%
filter(str_detect(link_texts, "Page suivante")) %>%
distinct() %>%
pull(links)
# Set url for next page
url_next_page <- str_c("https://www.archi-wiki.org", next_page)
# Progress bar
i = i + 1
setTxtProgressBar(pb, i)
}
# Set first url
url_1 <- "https://www.archi-wiki.org/Sp%C3%A9cial:Toutes_les_pages/Adresse:?from=&to=&namespace=0"
# Load html
page <- read_html(url_1)
# Get all links from page
links <- page %>%
html_nodes("a") %>%
html_attr('href')
# Get link text
link_texts <- page %>%
html_nodes("a") %>%
html_text()
# Put together to a tibble
full_data <- tibble(links, link_texts)
# Get link to next page
next_page <- full_data %>%
filter(str_detect(link_texts, "Page suivante")) %>%
distinct() %>%
pull(links)
# Set url for next page
url_next_page <- str_c("https://www.archi-wiki.org", next_page)
## Set progress bar
i <- 0
pb <- txtProgressBar(0, 38, style=3) # nrow(df_clean)
while (length(next_page) > 0) {
# Load html
page <- read_html(url_next_page)
# Get all links from page
links <- page %>%
html_nodes("a") %>%
html_attr('href')
# Get link text
link_texts <- page %>%
html_nodes("a") %>%
html_text()
# Put together to a tibble
page <- tibble(links, link_texts)
# Append to full data frame
full_data <- full_data %>%
bind_rows(page)
# Get link to next page
next_page <- page %>%
filter(str_detect(link_texts, "Page suivante")) %>%
distinct() %>%
pull(links)
# Set url for next page
url_next_page <- str_c("https://www.archi-wiki.org", next_page)
# Progress bar
i = i + 1
setTxtProgressBar(pb, i)
}
# Clean links
df_clean <- full_data %>%
filter(str_detect(link_texts, "^Adresse:")) %>%
filter(str_detect(link_texts, "Strasbourg"))
# Pull links and link texts
clean_links <- df_clean %>%
pull(links)
link_texts <- df_clean %>%
pull(link_texts)
# Set final urls
urls <- str_c("https://www.archi-wiki.org", clean_links)
# Save urls in R object
write_rds(urls, "9_archi-wiki/data/urls.RDS")
# Save urls in R object
write_rds(urls, "9_archi-wiki/data/urls.rds")
# Scrape date of construction, structure and coordinates from every page
## Set empty vectors
date_full <- c(character(0))
structure_full <- c(character(0))
lat_full <- c(character(0))
lon_full <- c(character(0))
## Set progress bar
i <- 0
pb <- txtProgressBar(0, length(urls), style=3)
## Loop over all urls
for (url in urls) {
# Load html
page <- read_html(url)
# Extract latitude and longitude from leaflet map (first coordinates that occur)
lat <- page %>%
html_nodes("#map_leaflet_1") %>%
html_text() %>%
str_extract('"lat":\\d+.\\d+') %>%
str_extract("\\d+.\\d+")
lon <- page %>%
html_nodes("#map_leaflet_1") %>%
html_text() %>%
str_extract('"lon":\\d+.\\d+') %>%
str_extract("\\d+.\\d+")
# Append to vector
lat_full <- c(lat_full, lat)
lon_full <- c(lon_full, lon)
# Extract date of construction and structure from infobox
# Get children of node "table.infobox"
children <- page %>%
html_nodes("table.infobox") %>%
html_children()
# Set empty string for construction date
date <- ""
# Loop over all children of node "table.infobox"
for (child in children) {
# Get text out of node child
child_text <- html_text(child)
# Extract date of construction of building
if (str_detect(child_text, "Date de construction")) {
# In case there is more than one date take the first one
if (nchar(date) == 0) {
date <- child_text
} # end if
} # end if
# Extract structure of building
else if (str_detect(child_text, "Structure")) {
structure <- child_text
} # end else if
} # end inner for-loop
# Append to vector
date_full <- c(date_full, date)
structure_full <- c(structure_full, structure)
# Progress bar
i = i + 1
setTxtProgressBar(pb, i)
} # end outer for-loop
stras_carto <- read_sf("9_archi-wiki/data/referentiel_carto_10_000_shp/rg_c10_amenagt_es_vert.shp")
# Put together to a tibble
df <- bind_cols(tibble(urls),
tibble(link_texts),
tibble(date_full),
tibble(structure_full),
tibble(lat_full),
tibble(lon_full))
# Put together to a tibble
df <- bind_cols(tibble(urls)[1:1238],
tibble(link_texts),
tibble(date_full),
tibble(structure_full),
tibble(lat_full),
tibble(lon_full))
# Put together to a tibble
df <- bind_cols(tibble(urls[1:1238]),
tibble(link_texts),
tibble(date_full),
tibble(structure_full),
tibble(lat_full),
tibble(lon_full))
# Put together to a tibble
df <- bind_cols(tibble(urls[1:1238]),
tibble(link_texts[1:1238]),
tibble(date_full),
tibble(structure_full),
tibble(lat_full),
tibble(lon_full))
tibble(structure_full)
# Put together to a tibble
df <- bind_cols(tibble(urls[1:2738]),
tibble(link_texts[1:27238]),
tibble(date_full),
tibble(structure_full)
#tibble(lat_full),
#tibble(lon_full)
)
# Put together to a tibble
df <- bind_cols(tibble(urls[1:2738]),
tibble(link_texts[1:2738]),
tibble(date_full),
tibble(structure_full)
#tibble(lat_full),
#tibble(lon_full)
)
View(df)
## First run went till 2738 -> continue with 2739
length(date_full)/length(urls)
## First run went till 2738 -> continue with 2739
length(date_full)/length(urls) * 100
write_rds(df, "9_archi-wiki/data/archi_wiki_1.rds")
write_rds(df, "9_archi-wiki/data/archi-wiki_1.rds")
# Load packages
library(tidyverse)
library(sf)
library(leaflet)
# Réferentiel 1:10000
## Bâtiment individuel
stras_carto_bati <- read_sf("9_archi-wiki/data/referentiel_carto_10_000_shp/rg_c10_bati_indiv.shp")
st_crs(stras_carto_bati)
stras_carto_bati <- stras_carto_bati %>%
st_transform(4326) %>%
st_set_crs(NA) %>%
st_set_crs('+proj=longlat +datum=WGS84')
View(stras_carto_bati)
# Set map
map <- leaflet(stras_carto_bati) %>%
# Set view to Strasbourg city
setView(lng = 7.7534101, lat = 48.5812226, zoom = 14) %>%
addTiles() %>%
addPolygons(
fillColor = "green",
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)
# label = labels,
# labelOptions = labelOptions(
#   style = list("font-weight" = "normal", padding = "3px 8px"),
#   textsize = "15px",
#   direction = "auto")
)
map
plot(stras_carto_bati$geometry)
# Set map
map <- leaflet(stras_carto_bati) %>%
# Set view to Strasbourg city
setView(lng = 7.7534101, lat = 48.5812226, zoom = 14) %>%
addTiles() %>%
addPolygons(
fillColor = "green",
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
# Set map
map <- leaflet(stras_carto_bati) %>%
# Set view to Strasbourg city
setView(lng = 7.7534101, lat = 48.5812226, zoom = 14) %>%
addTiles()
map
# Set map
map <- leaflet(stras_carto_bati) %>%
# Set view to Strasbourg city
setView(lng = 7.7534101, lat = 48.5812226, zoom = 14) %>%
addTiles() %>%
addPolygons(
fillColor = "green",
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
map
names(stras_carto_bati)
names(stras_carto_bati$geometry)
st_geometry(stras_carto_bati)
names(st_geometry(stras_carto_bati))
names(st_geometry(stras_carto_bati$geometry))
class(stras_carto_bati)
class(stras_carto_bati) = c("sf", "data.frame")
# Set map
map <- leaflet(stras_carto_bati) %>%
# Set view to Strasbourg city
setView(lng = 7.7534101, lat = 48.5812226, zoom = 14) %>%
addTiles() %>%
addPolygons(
fillColor = "green",
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
map
# Set map
map <- leaflet(stras_carto_bati) %>%
# Set view to Strasbourg city
setView(lng = 7.7534101, lat = 48.5812226, zoom = 14) %>%
addTiles() %>%
addPolygons(
fillColor = "green",
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)
map
class(stras_carto_bati) = c("sf", "data.frame")
names(st_geometry(stras_carto_bati$geometry))
mapview(stras_carto_bati)
install.packages("mapview")
library(mapview)
mapview(stras_carto_bati)

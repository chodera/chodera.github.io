#addProviderTiles(providers$CartoDB.Positron) %>%
addTiles() %>%
addAwesomeMarkers(
lng = ~lon,
lat = ~lat,
popup = ~name,
icon = basket
)
## Show map
map
## Define map
map <- leaflet(marche_stras_full) %>%
#addProviderTiles(providers$CartoDB.Positron) %>%
addTiles() %>%
addAwesomeMarkers(
lng = ~lon,
lat = ~lat,
popup = ~name,
icon = ~type
)
## Define map
map <- leaflet(marche_stras_full) %>%
#addProviderTiles(providers$CartoDB.Positron) %>%
addTiles() %>%
addAwesomeMarkers(
lng = ~lon,
lat = ~lat,
popup = ~name,
icon = ~type
)
## Define map
map <- leaflet(marche_stras_full) %>%
#addProviderTiles(providers$CartoDB.Positron) %>%
addTiles() %>%
addAwesomeMarkers(
lng = ~lon,
lat = ~lat,
popup = ~name,
icon = ~ifelse(type == "book", book, basket)
)
## Show map
map
## Define map
map <- leaflet(marche_stras_full) %>%
#addProviderTiles(providers$CartoDB.Positron) %>%
addTiles() %>%
addAwesomeMarkers(
lng = ~lon,
lat = ~lat,
popup = ~name,
icon = ~ifelse(type == "book", book, basket)
)
## Show map
map
marketIcons <- iconList(
basket <- awesomeIcons(
icon = 'shopping-basket',
iconColor = '#ffffff',
library = 'fa',
markerColor = "green"
),
book <- awesomeIcons(
icon = 'book',
iconColor = '#ffffff',
library = 'fa',
markerColor = "green"
),
flower <- awesomeIcons(
icon = 'ios-rose',
iconColor = 'white',
library = 'ion',
markerColor = "green"
),
brocante <- awesomeIcons(
icon = 'shopping-bag',
iconColor = '#ffffff',
library = 'fa',
markerColor = "green"
)
)
marketIcons <- awesomeIconList(
basket <- awesomeIcons(
icon = 'shopping-basket',
iconColor = '#ffffff',
library = 'fa',
markerColor = "green"
),
book <- awesomeIcons(
icon = 'book',
iconColor = '#ffffff',
library = 'fa',
markerColor = "green"
),
flower <- awesomeIcons(
icon = 'ios-rose',
iconColor = 'white',
library = 'ion',
markerColor = "green"
),
brocante <- awesomeIcons(
icon = 'shopping-bag',
iconColor = '#ffffff',
library = 'fa',
markerColor = "green"
)
)
marketIcons <- awesomeIconList(
basket <- makeAwesomeIcon(
icon = 'shopping-basket',
iconColor = '#ffffff',
library = 'fa',
markerColor = "green"
),
book <- makeAwesomeIcon(
icon = 'book',
iconColor = '#ffffff',
library = 'fa',
markerColor = "green"
),
flower <- makeAwesomeIcon(
icon = 'ios-rose',
iconColor = 'white',
library = 'ion',
markerColor = "green"
),
brocante <- makeAwesomeIcon(
icon = 'shopping-bag',
iconColor = '#ffffff',
library = 'fa',
markerColor = "green"
)
)
## Define map
map <- leaflet(marche_stras_full) %>%
#addProviderTiles(providers$CartoDB.Positron) %>%
addTiles() %>%
addAwesomeMarkers(
lng = ~lon,
lat = ~lat,
popup = ~name,
icon = ~marketIcons[type]
)
## Show map
map
marketIcons <- awesomeIconList(
basket = makeAwesomeIcon(
icon = 'shopping-basket',
iconColor = '#ffffff',
library = 'fa',
markerColor = "green"
),
book = makeAwesomeIcon(
icon = 'book',
iconColor = '#ffffff',
library = 'fa',
markerColor = "green"
),
flower = makeAwesomeIcon(
icon = 'ios-rose',
iconColor = 'white',
library = 'ion',
markerColor = "green"
),
brocante = makeAwesomeIcon(
icon = 'shopping-bag',
iconColor = '#ffffff',
library = 'fa',
markerColor = "green"
)
)
## Define map
map <- leaflet(marche_stras_full) %>%
#addProviderTiles(providers$CartoDB.Positron) %>%
addTiles() %>%
addAwesomeMarkers(
lng = ~lon,
lat = ~lat,
popup = ~name,
icon = ~marketIcons[type]
)
## Show map
map
?case_when
# Create column for markers
marche_stras_full <- marche_stras_full %>%
mutate(type = factor(
case_when(str_detect(name, "livres") ~ "book",
str_detect(name, "fleurs") ~ "flower",
str_detect(name, "brocante") ~ "brocante",
str_detect(name, ".*") ~ "basket"),
c("book", "flower", "brocante", "basket")))
# Create column for markers
marche_stras_full <- marche_stras_full %>%
mutate(type = factor(
case_when(str_detect(name, "livres") ~ "book",
str_detect(name, "fleurs") ~ "flower",
str_detect(name, "brocante") ~ "brocante",
str_detect(name, ".*") ~ "basket"),
c("book", "flower", "brocante", "basket")))
View(marche_stras_full)
# Create column for markers
marche_stras_full <- marche_stras_full %>%
mutate(type = factor(
case_when(str_detect(name, "livres") ~ "book",
str_detect(name, "fleurs") ~ "flower",
str_detect(name, "Brocante") ~ "brocante",
str_detect(name, ".*") ~ "basket"),
c("book", "flower", "brocante", "basket")))
marketIcons <- awesomeIconList(
basket = makeAwesomeIcon(
icon = 'shopping-basket',
iconColor = '#ffffff',
library = 'fa',
markerColor = "green"
),
book = makeAwesomeIcon(
icon = 'book',
iconColor = '#ffffff',
library = 'fa',
markerColor = "green"
),
flower = makeAwesomeIcon(
icon = 'ios-rose',
iconColor = 'white',
library = 'ion',
markerColor = "green"
),
brocante = makeAwesomeIcon(
icon = 'shopping-bag',
iconColor = '#ffffff',
library = 'fa',
markerColor = "green"
)
)
## Define map
map <- leaflet(marche_stras_full) %>%
#addProviderTiles(providers$CartoDB.Positron) %>%
addTiles() %>%
addAwesomeMarkers(
lng = ~lon,
lat = ~lat,
popup = ~name,
icon = ~marketIcons[type]
)
## Show map
map
# Create column for markers
marche_stras_full <- marche_stras_full %>%
mutate(type = factor(
case_when(str_detect(name, "livres") ~ "book",
str_detect(name, "fleurs") ~ "flower",
str_detect(name, "Brocante") ~ "brocante",
str_detect(name, ".*") ~ "basket"),
c("book", "flower", "brocante", "basket")))
# Save data set
write_rds(marche_stras_full, "10_marches_strasbourg/marche_stras.rds")
runApp('10_marches_strasbourg/marche-app')
runApp('10_marches_strasbourg/marche-app')
runApp('10_marches_strasbourg/marche-app')
shiny::runApp('10_marches_strasbourg/marche-app')
runApp()
runApp('10_marches_strasbourg/marche-app')
runApp('10_marches_strasbourg/marche-app')
runApp('10_marches_strasbourg/marche-app')
runApp('10_marches_strasbourg/marche-app')
runApp('10_marches_strasbourg/marche-app')
runApp('10_marches_strasbourg/marche-app')
runApp('10_marches_strasbourg/marche-app')
runApp('10_marches_strasbourg/marche-app')
options(shinyapps.locale.cache=FALSE)
shinyapps:::systemLocale()
devtools::install_github('rstudio/shinyapps')
deployApp()
library(shinyapps)
runApp('10_marches_strasbourg/marche-app')
runApp('10_marches_strasbourg/marche-app')
runApp('10_marches_strasbourg/marche-app')
runApp('8_unequal_political_participation_europe/unequal-map-app')
# Load packages
library(tidyverse)
library(haven)
library(sf)
library(leaflet)
# Load survey and macro data (Stata file)
ess <- read_dta("full_data.dta")
# Load packages
library(tidyverse)
library(haven)
library(sf)
library(leaflet)
# Load survey and macro data (Stata file)
ess <- read_dta("8_unequal_political_participation_europe/data/full_data.dta")
## Extract relevant data by NUTS 1 region
ess_by_region <- ess %>%
drop_na() %>%
group_by(id_r) %>%
summarise(vote = round(mean(vote * 100), 2),
demo = round(mean(demo * 100), 2),
workparty = round(mean(workparty * 100), 2),
boycott = round(mean(boycott * 100), 2)) %>%
drop_na()
# Load shape file
## Source: https://ec.europa.eu/eurostat/web/gisco/geodata/reference-data/administrative-units-statistical-units/nuts
nuts1 <- read_sf("NUTS_RG_60M_2016_4326_LEVL_1.shp")
nuts1 <- nuts1 %>%
# Drop irrelavant countries
filter(!CNTR_CODE %in% c("BG", "CY", "DK", "EL", "LV", "LI", "ME", "MK", "MA", "RO", "TR", "HR", "SK")) %>%
select(id_r = NUTS_ID,
id_c = CNTR_CODE)
# Load shape file
## Source: https://ec.europa.eu/eurostat/web/gisco/geodata/reference-data/administrative-units-statistical-units/nuts
nuts1 <- read_sf("8_unequal_political_participation_europe/data/NUTS_RG_60M_2016_4326_LEVL_1.shp")
nuts1 <- nuts1 %>%
# Drop irrelavant countries
filter(!CNTR_CODE %in% c("BG", "CY", "DK", "EL", "LV", "LI", "ME", "MK", "MA", "RO", "TR", "HR", "SK")) %>%
select(id_r = NUTS_ID,
id_c = CNTR_CODE)
# Combine both data sets
ess_full <- left_join(nuts1, ess_by_region, by = "id_r")
## Set base map
base_map <- leaflet(ess_full) %>%
setView(10, 51, 3) %>%
addTiles()
# 1. Vote
## Define colors
bins <- c(seq(50, 100, by = 10))
pal <- colorBin("RdYlGn", domain = ess_full$vote, bins = bins)
## Define labels
labels <- sprintf(
"<strong>NUTS code: %s</strong><br/>Vote share: %g<br/>",
ess_full$id_r, ess_full$vote
) %>% lapply(htmltools::HTML)
## Set map
vote_map <- base_map %>%
addPolygons(
fillColor = ~pal(vote),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~vote, opacity = 0.7, title = NULL,
position = "bottomright")
vote_map
## Set base map
base_map <- leaflet(ess_full) %>%
#setView(10, 51, 3) %>%
addTiles()
# 1. Vote
## Define colors
bins <- c(seq(50, 100, by = 10))
pal <- colorBin("RdYlGn", domain = ess_full$vote, bins = bins)
## Define labels
labels <- sprintf(
"<strong>NUTS code: %s</strong><br/>Vote share: %g<br/>",
ess_full$id_r, ess_full$vote
) %>% lapply(htmltools::HTML)
## Set map
vote_map <- base_map %>%
addPolygons(
fillColor = ~pal(vote),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~vote, opacity = 0.7, title = NULL,
position = "bottomright")
vote_map
## Set base map
base_map <- leaflet(ess_full) %>%
setView(10, 51, 3) %>%
addTiles()
# 1. Vote
## Define colors
bins <- c(seq(50, 100, by = 10))
pal <- colorBin("RdYlGn", domain = ess_full$vote, bins = bins)
## Define labels
labels <- sprintf(
"<strong>NUTS code: %s</strong><br/>Vote share: %g<br/>",
ess_full$id_r, ess_full$vote
) %>% lapply(htmltools::HTML)
## Set map
vote_map <- base_map %>%
addPolygons(
fillColor = ~pal(vote),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~vote, opacity = 0.7, title = NULL,
position = "bottomright")
shiny::runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
?bootstrapPage
runApp('8_unequal_political_participation_europe/unequal-app')
# Load shape file
## Source: https://ec.europa.eu/eurostat/web/gisco/geodata/reference-data/administrative-units-statistical-units/nuts
nuts1 <- read_sf("8_unequal_political_participation_europe/data/NUTS_RG_60M_2013_4326_LEVL_1.shp")
nuts1 <- nuts1 %>%
# Drop irrelavant countries
filter(!CNTR_CODE %in% c("BG", "CY", "DK", "EL", "LV", "LI", "ME", "MK", "MA", "RO", "TR", "HR", "SK")) %>%
select(id_r = NUTS_ID,
id_c = CNTR_CODE)
# Combine both data sets
ess_full <- left_join(nuts1, ess_by_region, by = "id_r")
## Set base map
base_map <- leaflet(ess_full) %>%
setView(10, 51, 3) %>%
addTiles()
# 1. Vote
## Define colors
bins <- c(seq(50, 100, by = 10))
pal <- colorBin("RdYlGn", domain = ess_full$vote, bins = bins)
## Define labels
labels <- sprintf(
"<strong>NUTS code: %s</strong><br/>Vote share: %g<br/>",
ess_full$id_r, ess_full$vote
) %>% lapply(htmltools::HTML)
## Set map
vote_map <- base_map %>%
addPolygons(
fillColor = ~pal(vote),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~vote, opacity = 0.7, title = NULL,
position = "bottomright")
vote_map
# Save data set
write_rds(ess_full, "ess_plus_nuts.rds")
ess_full <- read_rds("data/ess_plus_nuts.rds")
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
?leafletProxy
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
runApp('8_unequal_political_participation_europe/unequal-app')
